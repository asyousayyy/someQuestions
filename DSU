class DisjointSet {
    vector<int> rank, parent, size; 
    DisjointSet(int n) {
        rank.resize(n+1, 0); 
        parent.resize(n+1);
        size.resize(n+1); 

        for(int i = 0;i<=n;i++) {
            parent[i] = i; 
            size[i] = 1; 
        }

    }

  int findUltPar(int node) {
        if(node == parent[node])
            return node; 

        return parent[node] = findUltPar(parent[node]); 
    }

void unionByRank(int u, int v) {
        int par_u = findUltPar(u); 
        int par_v = findUltPar(v); 

        if(par_u == par_v) return;

        if(rank[par_u] < rank[par_v]) {
            parent[par_u] = par_v; 
        }
        else if(rank[par_v] < rank[par_u]) {
            parent[par_v] = par_u; 
        }
        else {
            parent[par_v] = par_u; 
            rank[par_u]++; 
        }
    }

void unionBySize(int u, int v) {
        int par_u = findUltPar(u); 
        int par_v = findUltPar(v); 

        if(par_u == par_v) return;

        if(size[par_u] < size[par_v]) {
            parent[par_u] = par_v; 
            size[par_v] += size[par_u]; 
        }
        else {
            parent[par_v] = par_u;
            size[par_u] += size[par_v]; 
        }
    }
};
