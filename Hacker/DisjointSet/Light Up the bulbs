#include <bits/stdc++.h>
using namespace std;

class DisjointSet {
    vector<int> rank, parent, size;
public:
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

int main() {
    int n;
    cin >> n;

    vector<pair<int, int>> pts(n);
    for (int i = 0; i < n; i++) {
        cin >> pts[i].first >> pts[i].second;
    }

    vector<pair<int, pair<int, int>>> dist;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            int dis = (pts[j].first - pts[i].first) * 
			(pts[j].first - pts[i].first) +
                      (pts[j].second - pts[i].second) * 
					  (pts[j].second - pts[i].second);
            dist.push_back({dis, {i, j}});
        }
    }

    sort(dist.begin(), dist.end()); 
    int cost = 0;

    DisjointSet ds(n);

    for (auto &it : dist) {
        int d = it.first;
        int x = it.second.first;
        int y = it.second.second;

        if (ds.findUPar(x) != ds.findUPar(y)) {
            ds.unionBySize(x, y);
            cost += d;
        }
    }

    cout << cost << endl;

    return 0;
}
