#include <bits/stdc++.h>
using namespace std;

const int N = 100005;

vector<int> v[N];
int vis[N], a[N];

void dfs(int u, int l) {
    vis[u] = 1;
    for (int i : v[u]) {
        if (!vis[i] && abs(a[u] - a[i]) <= l) {
            vis[i] = 1;
            dfs(i, l);
        }
    }
}

void solve() {
    int n, m;
    cin >> n >> m;
    int x, y;
    cin >> x >> y;

    for (int i = 0; i < m; i++) {
        int u1, v1;
        cin >> u1 >> v1;
        v[u1].push_back(v1);
        v[v1].push_back(u1);
    }

    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }

    int lo = 0, hi = 1e6, c = 0;

    while (lo <= hi) {

        int mid = (lo + hi) / 2;
        fill(vis, vis + N, 0);

        dfs(x, mid);

        if (vis[y]) { //can reach end
            c = mid;
            hi = mid - 1;
        } else {
            lo = mid + 1;
        }
    }

    cout << c << endl;
}

int main() {

    solve();
    return 0;

}
