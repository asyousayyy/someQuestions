bool allneg(vector<int> &arr){
    for(int i=0; i<arr.size(); i++){
        if(arr[i] > 0) return false;
    }
    return true;
}

int helper(vector<int> &arr){
    //maximum subarray sum
    int s = 0;
    int maxi = 0;
    if(allneg(arr)){
        return *max_element(arr.begin(), arr.end());
    }
    
    for(int i=0; i<arr.size(); i++){
        s += arr[i];
        
        if(s < 0){
            s = 0;
        }
        
        maxi = max(maxi, s);
    }
    
    return maxi;
}

int helper2(vector<int> &arr){
    //maximum subsequence sum
    int s = 0;
    if(allneg(arr)){
        return *max_element(arr.begin(), arr.end());
    }
    for(auto it : arr){
        if(it > 0){
            s += it;
        }
    }
    return s;
}

vector<int> maxSubarray(vector<int> arr) {
    int n = arr.size();
    int f1 = helper(arr);
    int f2 = helper2(arr);
    return {f1,f2};
}
