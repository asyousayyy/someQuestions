class Solution {
public:
    bool solve(int target, vector<int> &temp, vector<vector<int>> &dp, int idx){
        int n = temp.size();
        if(idx>=n){
            return target == 0;
        }

        if(dp[idx][target] != -1) return dp[idx][target];

        bool nottake = solve(target, temp,dp,idx+1);
        bool take = false;

        if(temp[idx]<=target){
            take = solve(target-temp[idx],temp,dp,idx+1);
        }

        return dp[idx][target] = (take | nottake);
    }

    bool targetsum(int target, vector<int> &temp){
        int n = temp.size();
        vector<vector<int>> dp(n+1, vector<int>(target+1,-1));
        return solve(target,temp,dp,0);
    }

    bool helper(vector<int> &nums, vector<vector<int>> &q, int mid) {
    int n = nums.size();
    map<int, vector<int>> mp; 

    for (int i = 0; i <= mid; i++) {
        int l = q[i][0];
        int r = q[i][1];
        int val = q[i][2];

        for (int j = l; j <= r; j++) {
            mp[j].push_back(val);
        }
    }

    for(int i=0; i<n; i++){
        int target = nums[i];
        
        if(mp.find(i) == mp.end()){
            if(nums[i] != 0) return false;
        }

        vector<int> temp = mp[i];
        if(targetsum(target,temp)==false) return false;

    }

    return true;
}

int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
    int n = nums.size();
    int m = q.size();
    int low = 0, high = m - 1;
    int res = -1;

    bool allZero = true;
    for (int num : nums) {
        if (num != 0) {
            allZero = false;
            break;
        }
    }
    if (allZero) return 0;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (helper(nums, q, mid)) {
            res = mid + 1;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }

    return res;
}
};
