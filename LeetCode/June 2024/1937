// long long helper(int i, int j, vector<vector<int>> &points, 
// vector<vector<long long>> &dp, int m, int n){

//     if(i>=m || j>=n || j<0) return 0;
//     if(dp[i][j] != -1) return dp[i][j];

//     long long curr = points[i][j];
//     long long maxi = 0;

//     for(int newj = 0; newj < n; newj++){
//         long long nextpt = helper(i+1,newj,points,dp,m,n);
//         maxi = max(maxi, curr + nextpt - abs(newj-j));
//     }

//     return dp[i][j] = maxi;
// }

long long maxPoints(vector<vector<int>>& points) {
    int m = points.size(), n = points[0].size();
    long long int curr[n];
    long long maxi = 0;

    for(int i=0; i<n; i++){
        curr[i] = points[0][i]; //first row
    }

    for(int i=1; i<m; i++){ 
        long long int pre[n], suf[n];

        for(int j=0; j<n; j++){
            if(j==0){
                pre[j] = curr[j];
            }
            else{
                pre[j] = max(pre[j-1]-1, curr[j]);
            }
        }

        for(int j=n-1; j>=0; j--){
            if(j==n-1){
                suf[n-1] = curr[n-1];
            }
            else{
                suf[j] = max(suf[j+1]-1, curr[j]);
            }
        }

        for(int j=0; j<n; j++){
            curr[j] =  max(pre[j],suf[j]) + points[i][j];
        }
    }

    for(int j=0; j<n; j++){
        maxi = max(maxi, curr[j]);
    }    

    return maxi;

}
