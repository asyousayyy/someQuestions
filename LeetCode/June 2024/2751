static bool cmp(pair<int, pair<int, int>> &a, pair<int, pair<int, int>> &b) {
        return a.first < b.first; 
    }

    vector<int> survivedRobotsHealths(vector<int>& pos, vector<int>& h, string dir) {
        
        int n = dir.size();
        vector<int> ans(n, -1);

        vector<pair<int, pair<int, int>>> v;
        for (int i = 0; i < n; i++) {
            if (dir[i] == 'R') {
                v.push_back({pos[i], {h[i], i}});
            } else if (dir[i] == 'L') {
                v.push_back({pos[i], {-1 * h[i], i}});
            }
        }

        sort(v.begin(), v.end(), cmp);
        stack<pair<int, int>> st;

        for (int i = 0; i < v.size(); i++) {
            if (st.empty()) {
                st.push(v[i].second);
            } 
            else {
                while (!st.empty() && v[i].second.first < 0 && st.top().first > 0) {
                    //collision only when (R,L)
                    int x = st.top().first;
                    int idx_x = st.top().second;
                    st.pop();

                    int y = abs(v[i].second.first); 
                    int idx_y = v[i].second.second;

                    if (x == y) {
                        v[i].second.first = 0; 
                        break;
                    }
                    else if (x > y) {
                        v[i].second.first = 0;
                        st.push({x - 1, idx_x});
                        break;
                    } else {
                        v[i].second.first = -(y - 1); 
                    }
                }
                
                if (v[i].second.first != 0) {
                    st.push(v[i].second); //all other cases
                }
            }
        }

        while (!st.empty()) {
            int health = st.top().first;
            int index = st.top().second;
            st.pop();
            ans[index] = abs(health);
        }

        vector<int> ans1;
        for (int i = 0; i < n; i++) {
            if (ans[i] > 0) { //robot is there
                ans1.push_back(ans[i]);
            }
        }

        return ans1;
    }   
