int dx[4] = {1,-1,0,0};
    int dy[4] = {0,0,1,-1};

    vector<int> bfs(int i, int j, vector<vector<int>> &land,
    vector<vector<int>> &vis){

        vector<int> ans;
        ans.push_back(i);
        ans.push_back(j); //starting wale
        vis[i][j] = 1;

        queue<pair<int,int>> q;
        q.push({i,j});

        int newi = i, newj = j;

        while(!q.empty()){
            auto it = q.front();
            int r = it.first;
            int c = it.second;
            q.pop();

            for(int k=0; k<4; k++){
                int newr = r + dx[k];
                int newc = c + dy[k];

                if(newr>=0 && newr < land.size() && newc>=0 &&
                newc < land[0].size() && !vis[newr][newc] && land[newr][newc]==1){
                    newi = max(newi, newr);
                    newj = max(newj, newc);
                    q.push({newr, newc});
                    vis[newr][newc] = 1;
                }
            }
        }

        //now maximised both
        ans.push_back(newi);
        ans.push_back(newj);
        return ans;
    }

    vector<vector<int>> findFarmland(vector<vector<int>>& land) {
        
        int m = land.size(), n = land[0].size();
        vector<vector<int>> ans;
        vector<vector<int>> vis(m+1,vector<int>(n+1,0));

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(land[i][j]==1 && !vis[i][j]){
                    vector<int> temp = bfs(i,j,land,vis);
                    ans.push_back(temp);
                }
            }
        }

        return ans;

    }
