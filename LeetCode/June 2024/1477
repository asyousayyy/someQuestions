int helper(vector<int> &arr, int target){
        int n = arr.size();
        vector<int> pre(n), suf(n);
        int len1 = INT_MAX, len2 = INT_MAX;

        int i=0,sum=0;
        for(int j=0; j<n; j++){
            sum += arr[j];
            while(sum > target){
                sum -= arr[i];
                i++;
            }
            if(sum==target){
                len1 = min(len1, j-i+1);
            }
            pre[j] = len1>=INT_MAX ? -1 : len1;
        }

        i = n-1, sum = 0;
        for(int j=n-1; j>=0; j--){
            sum += arr[j];
            while(sum > target){
                sum -= arr[i];
                i--;
            }
            if(sum==target){
                len2 = min(len2, i-j+1);
            }
            suf[j] = len2==INT_MAX ? -1 : len2;
        }

        //now sum of lengths
        int ans = 1e9;
        for(int i=0; i<n; i++){
            int l = pre[i];
            int r = i+1<n ? suf[i+1] : -1;
            if(l != -1 && r != -1){
                ans = min(ans, l+r);
            }
        }

        return ans>=1e9 ? -1 : ans;
    }

    int minSumOfLengths(vector<int>& arr, int target) {
        return helper(arr,target);
    }
