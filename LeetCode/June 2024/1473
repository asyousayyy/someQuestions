int dp[101][101][21]; // index, count of neighborhoods, prev color

int helper(vector<int> &h, vector<vector<int>> &cost, int i, int prev,
int target, int count) {
    int m = h.size();
    int n = cost[0].size();

    if (i == m) {
        return (count == target) ? 0 : 1e7;
    }

    if (count > target) {
        return 1e7; 
    }

    if (dp[i][count][prev] != -1) return dp[i][count][prev];

    int mini = INT_MAX;

    if (h[i] != 0) { // already painted
        if (h[i] != prev) {
            mini = helper(h, cost, i + 1, h[i], target, count + 1);
        } else {
            mini = helper(h, cost, i + 1, h[i], target, count);
        }
    } else { // have to paint
        for (int j = 0; j < n; j++) {
            int temp;
            if ((j + 1) != prev) {
                temp = cost[i][j] + helper(h, cost, i + 1, j + 1, target, count + 1);
            } else {
                temp = cost[i][j] + helper(h, cost, i + 1, j + 1, target, count);
            }
            mini = min(mini, temp);
        }
    }

    return dp[i][count][prev] = mini;
}

int minCost(vector<int>& h, vector<vector<int>>& cost, int m, int n, int target) {
    memset(dp, -1, sizeof(dp));
    int result = helper(h, cost, 0, 0, target, 0);
    return (result >= 1e7) ? -1 : result;
}
