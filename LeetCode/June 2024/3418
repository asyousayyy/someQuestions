int maximumAmount(vector<vector<int>>& coins) {
        
        int m = coins.size();
        int n = coins[0].size();
        
        vector<vector<vector<int>>> dp(m, vector<vector<int>>(n, vector<int>(3,INT_MIN)));

        for(int k=0; k<3; k++){
            dp[0][0][k] = coins[0][0]>=0 ? coins[0][0] : (k>0 ? 0 : coins[0][0]);
        }

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                for(int k=0; k<3; k++){
                    if(i==0 && j==0) continue; //done for them

                    int curr = coins[i][j];
                    int temp = (curr<0 && k>0) ? 0 : curr;

                    if(j>0){ //left
                        //did not neutralize
                        dp[i][j][k] = max(dp[i][j][k], dp[i][j-1][k] + curr);
                        //we did neutralize
                        if(curr<0 && k>0){
                            dp[i][j][k] = max(dp[i][j][k], dp[i][j-1][k-1]+temp);
                        }
                    }

                    if(i>0){ //up
                        dp[i][j][k] = max(dp[i][j][k], dp[i-1][j][k]+curr);
                        if(curr<0 && k>0){
                            dp[i][j][k] = max(dp[i][j][k], dp[i-1][j][k-1]+temp);
                        }
                    }
                }
            }
        }

        return max(dp[m-1][n-1][0], max(dp[m-1][n-1][1], dp[m-1][n-1][2]));
    }
