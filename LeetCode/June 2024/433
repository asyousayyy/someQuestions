int minMutation(string start, string end, vector<string>& bank) {
        
        unordered_set<string> bankSet(bank.begin(), bank.end()); 
        if(start==end) return 0;
        if (!bankSet.count(end)) return -1;

        queue<pair<string, int>> q;
        q.push({start, 0});
        vector<char> genes = {'A', 'C', 'G', 'T'}; 

        while (!q.empty()) {
            auto [current, steps] = q.front();
            q.pop();

            if (current == end) return steps;

            for (int i = 0; i < current.size(); ++i) {
                char originalChar = current[i];
                for (char ch : genes) {
                    if (ch == originalChar) continue; 

                    current[i] = ch;
                    if (bankSet.count(current)) {
                        q.push({current, steps + 1});
                        bankSet.erase(current); //for avoiding revisiting
                    }
                }
                current[i] = originalChar; 
            }
        }

        return -1; 
    }
