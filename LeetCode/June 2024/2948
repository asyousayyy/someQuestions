class DisjointSet {
    public:
    vector<int> rank, parent, size; 
    DisjointSet(int n) {
        rank.resize(n+1, 0); 
        parent.resize(n+1);
        size.resize(n+1); 

        for(int i = 0;i<=n;i++) {
            parent[i] = i; 
            size[i] = 1; 
        }

    }

  int findUPar(int node) {
        if(node == parent[node])
            return node; 

        return parent[node] = findUPar(parent[node]); 
    }

void unionByRank(int u, int v) {
        int par_u = findUPar(u); 
        int par_v = findUPar(v); 

        if(par_u == par_v) return;

        if(rank[par_u] < rank[par_v]) {
            parent[par_u] = par_v; 
        }
        else if(rank[par_v] < rank[par_u]) {
            parent[par_v] = par_u; 
        }
        else {
            parent[par_v] = par_u; 
            rank[par_u]++; 
        }
    }

void unionBySize(int u, int v) {
        int par_u = findUPar(u); 
        int par_v = findUPar(v); 

        if(par_u == par_v) return;

        if(size[par_u] < size[par_v]) {
            parent[par_u] = par_v; 
            size[par_v] += size[par_u]; 
        }
        else {
            parent[par_v] = par_u;
            size[par_u] += size[par_v]; 
        }
    }
};

class Solution {
public:
    vector<int> lexicographicallySmallestArray(vector<int>& nums, int limit) {
        
        int n = nums.size();
        vector<pair<int,int>> v;
        DisjointSet ds(n);

        for(int i=0; i<n; i++){
            v.push_back({nums[i],i});
        }

        sort(v.begin(), v.end());

        for(int i=1; i<n; i++){
            if(abs(v[i].first - v[i-1].first) <= limit){
                ds.unionBySize(v[i].second, v[i-1].second);
            }
        }

        map<int,vector<int>> mp; //parent,child
        for(int i=0; i<n; i++){
            mp[ds.findUPar(i)].push_back(i);
        }

        for(auto it : mp){
            vector<int> t = it.second;
            vector<int> temp;
            for(auto x : t){
                temp.push_back(nums[x]);
            }

            sort(temp.begin(), temp.end()); //sorted values now
            for(int i=0; i<t.size(); i++){
                nums[t[i]] = temp[i];
            }
        }

        return nums;

    }
};
