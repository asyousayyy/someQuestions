#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <sstream>
using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

unordered_map<TreeNode*, vector<TreeNode*>> g;

void dfs(TreeNode* root, TreeNode* p) {
    if (!root) return;
    g[root].push_back(p);
    if (p) g[p].push_back(root);
    dfs(root->left, root);
    dfs(root->right, root);
}

int findClosestLeaf(TreeNode* root, int k) {
    dfs(root, nullptr);
    queue<pair<TreeNode*, int>> q; // Pair of TreeNode* and distance
    for (auto& e : g) {
        if (e.first && e.first->val == k) {
            q.push({e.first, 0});
            break;
        }
    }
    unordered_set<TreeNode*> seen;
    while (!q.empty()) {
        auto [node, dist] = q.front();
        q.pop();
        seen.insert(node);
        if (node) {
            if (!node->left && !node->right) return dist;
            for (auto next : g[node]) {
                if (!seen.count(next))
                    q.push({next, dist + 1});
            }
        }
    }
    return 0;
}

// Helper function to create a binary tree from level order input
TreeNode* buildTree(const vector<int>& nodes) {
    if (nodes.empty() || nodes[0] == -1) return nullptr;
    TreeNode* root = new TreeNode(nodes[0]);
    queue<TreeNode*> q;
    q.push(root);
    int i = 1;
    while (i < nodes.size()) {
        TreeNode* current = q.front();
        q.pop();
        if (i < nodes.size() && nodes[i] != -1) {
            current->left = new TreeNode(nodes[i]);
            q.push(current->left);
        }
        i++;
        if (i < nodes.size() && nodes[i] != -1) {
            current->right = new TreeNode(nodes[i]);
            q.push(current->right);
        }
        i++;
    }
    return root;
}

int main() {
    vector<pair<int, vector<int>>> test_cases = {
        {62, {15, 40, 62, -1, -1, 10, 20, -1, -1, -1, -1}},
        {2, {6, 1, 3, 5, -1, -1, 2, -1, -1, -1, -1}},
        {3, {1, 2, 3, -1, -1, 4, 5, 6, -1, -1, 7, 8, -1, -1, 9, -1, -1, -1, -1}},
        {4, {4, 3, 2, 10, -1, 3, 1, -1, -1, -1, -1, -1, -1}}
    };

    for (auto& [k, nodes] : test_cases) {
        TreeNode* root = buildTree(nodes);
        cout << "For target " << k << ", the closest leaf node distance is: " << findClosestLeaf(root, k) << endl;
    }

    return 0;
}

