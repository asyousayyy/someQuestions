static bool cmp(pair<pair<long long, long long>, int> &a, pair<pair<long long, long long>, int> &b) {
    return a.first.first < b.first.first;  
}

vector<int> getOrder(vector<vector<int>>& tasks) {
    vector<int> ans;
    vector<pair<pair<long long, long long>, int>> v;  
    
    for (int i = 0; i < tasks.size(); i++) {
        v.push_back({{tasks[i][0], tasks[i][1]}, i});
    }
    
    sort(v.begin(), v.end(), cmp);
    
    long long cur = v[0].first.first;  
    priority_queue<pair<long long, int>, vector<pair<long long, int>>, 
    greater<pair<long long, int>>> pq; //processing time, index
    int j = 0; 
    
    while (j < v.size() || !pq.empty()) {
        if (pq.empty()) {
            cur = max(cur, v[j].first.first);
        }

        while (j < v.size() && v[j].first.first <= cur) {
            pq.push({v[j].first.second, v[j].second});
            j++;
        }
        
        if (!pq.empty()) {
            auto it = pq.top();
            pq.pop();
            cur += it.first; 
            ans.push_back(it.second);  
        }
    }
    
    return ans;
}
