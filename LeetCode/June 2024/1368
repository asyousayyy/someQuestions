class Solution {
public:
    int minCost(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dist(m, vector<int>(n,INT_MAX));
        dist[0][0] = 0;

        // int dx[4] = {0,0,1,-1};
        // int dy[4] = {1,-1,0,0};
        map<int, pair<int,int>> mp;
        mp[1] = {0,1};
        mp[2] = {0,-1};
        mp[3] = {1,0};
        mp[4] = {-1,0};

        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>> pq;
        pq.push({0,0,0}); //cost,i,j

        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();

            int curr = it[0];
            int x = it[1];
            int y = it[2];

            if(x == m-1 && y == n-1) return curr;

            if(curr > dist[x][y]){
                continue;
            }

            //just go to the original arrow
            int direction = grid[x][y]; //1,2,3,4
            int newx = x + mp[direction].first;
            int newy = y + mp[direction].second;

            if(newx>=0 && newy>=0 && newx<m && newy<n){
                if(curr < dist[newx][newy]){
                    pq.push({curr,newx,newy});
                    dist[newx][newy] = curr;
                }
            }

            //now change the arrow
            for(int i=1; i<=4; i++){
                if(i != direction){
                    int nx = x + mp[i].first;
                    int ny = y + mp[i].second;

                    if(nx>=0 && ny>=0 && nx<m && ny<n){
                        if(curr+1 < dist[nx][ny]){
                            pq.push({curr+1,nx,ny});
                            dist[nx][ny] = curr+1;
                        }
                    }
                }
            }

        }

        return dist[m-1][n-1];
    }
};
