int helper(int a, vector<int>& mp) {
    string num_str = to_string(a);
    string new_num_str = "";
    for (char c : num_str) {
        new_num_str += to_string(mp[c - '0']);
    }
    return stoi(new_num_str);
}

static bool cmp(pair<int, pair<int, int>>& a, pair<int, pair<int, int>>& b) {
    if (a.second.first == b.second.first) {
        return a.second.second < b.second.second;
    }
    return a.second.first < b.second.first;
}

vector<int> sortJumbled(vector<int>& mp, vector<int>& nums) {
    int n = nums.size();
    vector<int> ans;

    vector<pair<int, pair<int, int>>> v;
    for (int i = 0; i < n; i++) {
        int temp = nums[i];
        int new_temp = helper(temp, mp);
        v.push_back({temp, {new_temp, i}});
    }

    sort(v.begin(), v.end(), cmp);
    for (auto it : v) {
        ans.push_back(it.first);
    }

    return ans;
}
