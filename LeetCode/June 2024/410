 bool ispossible(vector<int> &nums, int mid, int k) {
    int count = 1;  
    int curr = 0;

    for (int i = 0; i < nums.size(); i++) {
        if (curr + nums[i] > mid) {
            count++;
            curr = nums[i];  
            if (count > k) return false;  
        } else {
            curr += nums[i];
        }
    }

    return true;
}

int splitArray(vector<int>& nums, int k) {
    int n = nums.size();
    int low = *max_element(nums.begin(), nums.end());
    int high = accumulate(nums.begin(), nums.end(), 0);
    int ans = high;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (ispossible(nums, mid, k)) {
            ans = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }

    return ans;
}
