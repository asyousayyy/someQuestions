bool isdivisible(int sum) {
    return sum % 3 == 0;
}

int helper(vector<int>& nums, int i, int sum, vector<vector<int>>& dp) {
    if (i == nums.size()) {
        if (isdivisible(sum)) {
            return sum;
        } else {
            return INT_MIN;
        }
    }

    if (dp[i][sum] != -1) {
        return dp[i][sum];
    }

    int nottake = helper(nums, i + 1, sum, dp);
    int take = nums[i]+helper(nums, i + 1, (sum + nums[i])%3, dp);

    return dp[i][sum] = max(take, nottake);
}

int maxSumDivThree(vector<int>& nums) {
    int n = nums.size();
    if (n == 1 && nums[0] % 3 != 0) {
        return 0;
    }
    vector<vector<int>> dp(40001, vector<int>(3, -1));
    return helper(nums, 0, 0, dp);
}
