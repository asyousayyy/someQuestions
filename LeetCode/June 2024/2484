long long pre[10001][10][10];
    long long suff[10001][10][10];
    const long long mod = 1e9+7;

    int countPalindromes(string s) {
        int n = s.size();
        long long ans = 0;
        vector<long long> freq(10,0),freq1(10,0);
        freq[s[0]-'0']++;
        
        for(int i=1; i<n; i++){
            for(int j=0; j<10; j++){
                for(int k=0; k<10; k++){
                    if(k==s[i]-'0'){
                        pre[i][j][k] = pre[i-1][j][k] + freq[j]; //explanation at the end
                    }
                    else{
                        pre[i][j][k] = pre[i-1][j][k];
                    }
                }
            }
            freq[s[i]-'0']++;
        }

        freq1[s[n-1]-'0']++;

        for(int i=n-2; i>=0; i--){
            for(int j=0; j<10; j++){
                for(int k=0; k<10; k++){
                    if(k==s[i]-'0'){
                        suff[i][k][j] = suff[i+1][k][j] + freq1[j];
                    }
                    else{
                        suff[i][k][j] = suff[i+1][k][j];
                    }
                }
            }

            freq1[s[i]-'0']++;
        } 

        for(int i=0; i<n; i++){
            for(int j=0;j<10; j++){
                for(int k=0; k<10; k++){
                    if(i-1>=0 && i+1<n){
                        ans = (ans%mod + (pre[i-1][j][k]%mod * suff[i+1][k][j]%mod)%mod)%mod;
                    }
                }
            }
        }

        return ans;

    }
};

//because we are finding(j,k) pairs in the prefix part and the suffix part for every index
//now if the current character is different than k, then till that index i, simply
//assign pre[i-1][j][k] pairs because only that much are present till index i also
//but if s[index]==k, i.e the ending that we want then, add pairs till previous index
//(j,k) pair along with frequency of j, because we can make(j,k) pair with all j
//occuring previously with this current k
//same logic for suffix
//and then for each index just multiply pre and suff for each (j,k) pair
