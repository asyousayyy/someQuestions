void dfs(int node, vector<vector<int>> &adj, vector<int> &vis,
    vector<int> &temp){

        vis[node] = 1;
        temp.push_back(node);

        for(auto it : adj[node]){
            if(!vis[it]){
                dfs(it,adj,vis,temp);
            }
        }
    }

    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        
        vector<vector<int>> adj(n+1);
        vector<int> vis(n+1);
        int ans = 0;

        for(auto it : edges){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }

        for(int i=0; i<n; i++){
            if(!vis[i]){
                vector<int> temp;
                dfs(i,adj,vis,temp);
                bool check = false;
                for(int i=0; i<temp.size(); i++){
                    if(adj[temp[i]].size() < temp.size()-1){
                        //basically degree of each node should be
                        //number of nodes in component - 1
                        check = true;
                    }
                }

                if(!check) ans++;
            }
        }

        return ans;
    }
