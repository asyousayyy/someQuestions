class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size();
        if (n < 3) return false;

        int first = INT_MAX, second = INT_MAX;

        for (int num : nums) {
            if (num <= first) {
                first = num;
            } else if (num <= second) {
                second = num;
            } else {
                return true;
            }
        }

        return false;
    }
};

//TLE DP CODE
class Solution {
public:
    int helper(int idx, vector<int>& nums, vector<int>& dp) {
        if (idx >= nums.size()) return 0;
        if (dp[idx] != -1) return dp[idx];

        int maxLength = 1; 

        for (int i = idx + 1; i < nums.size(); i++) {
            if (nums[i] > nums[idx]) {
                int length = 1 + helper(i, nums, dp);
                maxLength = max(maxLength, length);
            }
        }

        return dp[idx] = maxLength;
    }

    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size();
        if (n < 3) return false;

        vector<int> dp(n, -1);

        for (int i = 0; i < n; i++) {
            if (helper(i, nums, dp) >= 3) {
                return true;
            }
        }

        return false;
    }
};
