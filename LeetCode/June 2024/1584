int dist(vector<int> &a, vector<int> &b){
        return abs(abs(a[0]-b[0]) + abs(a[1]-b[1]));
    }
    
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n = points.size();
        vector<pair<int,int>> adj[n];
        int cost = 0;

        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                adj[i].push_back({dist(points[i],points[j]),j});
                adj[j].push_back({dist(points[i],points[j]),i});
            }
        }

        priority_queue<pair<int,int>, vector<pair<int,int>>, 
        greater<pair<int,int>>> pq; //min heap

        pq.push({0,0}); //weight, node
        vector<int> vis(n,0);

        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();

            int wt = it.first;
            int node = it.second;

            if(vis[node]) continue;
            vis[node] = 1;
            cost += wt;

            for(auto it : adj[node]){
                if(!vis[it.second]){
                    pq.push({it.first, it.second});
                }
            }
        }

        return cost;
    }
