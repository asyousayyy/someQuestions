class DisjointSet {
public:
    vector<int> parent, rank, size;

    DisjointSet(int n) {
        parent.resize(n + 1);
        rank.resize(n + 1, 0);
        size.resize(n + 1, 1);

        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }

    int findUltPar(int node) {
        if (node == parent[node]) {
            return node;
        }
        return parent[node] = findUltPar(parent[node]);  
    }

    void unionByRank(int u, int v) {
        int par_u = findUltPar(u);
        int par_v = findUltPar(v);

        if (par_u == par_v) return;

        if (rank[par_u] < rank[par_v]) {
            parent[par_u] = par_v;
        } else if (rank[par_v] < rank[par_u]) {
            parent[par_v] = par_u;
        } else {
            parent[par_v] = par_u;
            rank[par_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int par_u = findUltPar(u);
        int par_v = findUltPar(v);

        if (par_u == par_v) return;

        if (size[par_u] < size[par_v]) {
            parent[par_u] = par_v;
            size[par_v] += size[par_u];
        } else {
            parent[par_v] = par_u;
            size[par_u] += size[par_v];
        }
    }
};

class Solution {
public:
    static bool cmp(const vector<int>& a, const vector<int>& b) {
        return a[2] < b[2];
    }

    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& edges, 
    vector<vector<int>>& queries) {
        DisjointSet ds(n);
        vector<bool> ans(queries.size());

        for(int i=0; i<queries.size(); i++){
            queries[i].push_back(i);
        }

        sort(edges.begin(), edges.end(), cmp);
        sort(queries.begin(), queries.end(), cmp);

        int j = 0;
        for (const auto& query : queries) {
            int u = query[0], v = query[1], limit = query[2], index = query[3];
            while (j < edges.size() && edges[j][2] < limit) {
                ds.unionBySize(edges[j][0], edges[j][1]);
                j++;
            }
            ans[index] = ds.findUltPar(u) == ds.findUltPar(v);
        }

        return ans;
    }
};
