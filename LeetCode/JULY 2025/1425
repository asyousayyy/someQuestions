 int constrainedSubsetSum(vector<int>& nums, int k) {
        int n = nums.size();
        int ans = INT_MIN;
        deque<int> dq;

        vector<int> dp(n);

        for(int i=0; i<n; i++){

            while(!dq.empty() && dq.front() < i-k){
                dq.pop_front();
            }

            dp[i] = nums[i]; //taking the number anyhow

            if(!dq.empty()) {
                dp[i] = max(dp[i], nums[i] + dp[dq.front()]);
            }

            while(!dq.empty() && dp[i]>=dp[dq.back()]){
                dq.pop_back();
            }

            dq.push_back(i);

            ans = max(ans, dp[i]);

        }

        for(int i=0; i<n; i++){
            cout<<dp[i]<<endl;
        }

        return ans;
    }
