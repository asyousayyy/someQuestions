class Solution {
public:

    void helper1(vector<int> &nums, vector<int> &left){
        int n = nums.size();
        stack<int> st;

        for(int i=0; i<n; i++){
            while(!st.empty() && nums[st.top()] <= nums[i]){
                st.pop();
                }
            
            if(st.empty()) left[i] = -1;
            else{
                left[i] = st.top();
            }
            st.push(i);
            }
    }
      
    
    void helper2(vector<int> &nums, vector<int> &right){
        int n = nums.size();
        stack<int> st;
        
        for(int i=n-1; i>=0; i--){
            while(!st.empty() && nums[st.top()]<=nums[i]){
                st.pop();
            }
            if(st.empty()) right[i] = -1;
            else right[i] = st.top();
            st.push(i);
        }
    }
    

    long long bowlSubarrays(vector<int>& nums) {
        int n = nums.size();
        if(n<3) return 0;

        long long cnt = 0;
        //see the literal bowls by drawing on paper
        vector<int> left(n,-1), right(n,-1);
        helper1(nums,left);
        helper2(nums,right);

        for(int i=1; i<n-1; i++){
            if(left[i] != -1 && right[i] != -1) cnt++;
        }

        return cnt;

    }
};
