class Solution {
public:

    void dfs(int node, vector<vector<pair<int,int>>> &adj, vector<int> &vis, int mid) {
        
        vis[node] = 1;

        for (auto &it : adj[node]) {
            int nei = it.first;
            int wt  = it.second;

            if (!vis[nei] && wt <= mid) {
                dfs(nei, adj, vis, mid);
            }
        }
    }


    bool helper(int n, int mid, vector<vector<pair<int,int>>> &adj) {
        
        vector<int> vis(n, 0);
        dfs(0, adj, vis, mid);

        for (int i = 0; i < n; i++) {
            if (!vis[i]) return false;
        }
        
        return true;
    }

    int minMaxWeight(int n, vector<vector<int>>& edges, int th) {
        
        vector<vector<pair<int,int>>> adj(n);
        int maxi = INT_MIN;
        
        for(auto it : edges){
            int u = it[0];
            int v = it[1];
            int w = it[2];
            maxi = max(maxi, w);
            adj[v].push_back({u,w}); //reversing the edges
        }

        int low = 0, high = maxi;
        int ans = -1;

        while(low<=high){
            int mid = (low+high)/2;

            if(helper(n,mid,adj)){
                ans = mid;
                high = mid-1;
            }

            else{
                low = mid+1;
            }
        }

        return ans;
    }
};
