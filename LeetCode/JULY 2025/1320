class Solution {
public:

    int dist(char a, char b, map<char,pair<int,int>> &mp){
        return abs(mp[a].first-mp[b].first) + abs(mp[a].second-mp[b].second);
    }

    int helper(string &word, vector<vector<vector<int>>> &dp, int i, int j, int idx,
    map<char,pair<int,int>> &mp){

        int ans = INT_MAX;

        if(idx>=word.size()) return 0; //word finish

        if(dp[i][j][idx]!=-1) return dp[i][j][idx];

        int left = 0, right = 0;

        if(i==0){ //left finger unplaced so take dist = 0;
            left = 0 + helper(word,dp,word[idx]-'A'+1,j,idx+1,mp);
        }
        else{
            left = dist((i-1)+'A', word[idx],mp) + helper(word,dp,word[idx]-'A'+1,
            j,idx+1,mp);
        }

        if(j==0){
            right = 0+helper(word,dp,i,word[idx]-'A'+1,idx+1,mp);
        }
        else{
            right = dist((j-1)+'A', word[idx],mp) + helper(word,dp,i,word[idx]-'A'+1,
            idx+1,mp);
        }

        return dp[i][j][idx] = min(left,right);

    }

    int minimumDistance(string word) {
        int n = word.size();
        map<char,pair<int,int>> mp;
        string temp = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        for(int i=0; i<temp.size(); i++){
            mp[temp[i]] = {i/6, i%6};
        }
        
        vector<vector<vector<int>>> dp(27, vector<vector<int>>(27, 
        vector<int>(n+1,-1)));

        return helper(word,dp,0,0,0,mp);
    }
};
