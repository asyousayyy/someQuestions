class Solution {
public:

    int helper(vector<int>& nums1, vector<int>& nums2, int i, 
    int prevVal, int prevFrom, vector<vector<int>>& dp) {
        
        if (i >= nums1.size()) return 0;

        if (dp[i][prevFrom + 1] != -1) return dp[i][prevFrom + 1];

        int take1 = 0, take2 = 0;

        if (prevFrom == -1 || nums1[i] >= prevVal)
            take1 = 1 + helper(nums1, nums2, i + 1, nums1[i], 0, dp);

        if (prevFrom == -1 || nums2[i] >= prevVal)
            take2 = 1 + helper(nums1, nums2, i + 1, nums2[i], 1, dp);

        return dp[i][prevFrom + 1] = max(take1, take2);
    }

    int maxNonDecreasingLength(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        vector<vector<int>> dp(n, vector<int>(3, -1));  

        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, helper(nums1, nums2, i, -1, -1, dp));
        }

        return ans;
    }

};
