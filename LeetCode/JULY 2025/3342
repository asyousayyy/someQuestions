class Solution {
public:
    #define ll long long
    
    int minTimeToReach(vector<vector<int>>& nums) {
        int n = nums.size();
        int m = nums[0].size();

        int dx[4] = {0,0,1,-1};
        int dy[4] = {1,-1,0,0};

        priority_queue<pair<pair<ll,int> , pair<int,int>>, 
        vector<pair<pair<ll,int>, pair<int,int>>>,
        greater<pair<pair<ll,int>, pair<int,int>>>> q;
        
        q.push({{0,1},{0,0}}); // time,turn,x,y

        vector<vector<ll>> dist(n,vector<ll>(m,1e18));
        dist[0][0] = 0;

        while(!q.empty()){
            auto it = q.top();
            q.pop();

            ll currtime = it.first.first;
            int turn = it.first.second;
            int x = it.second.first;
            int y = it.second.second;

            if(x==n-1 && y==m-1) return currtime;

            if(currtime > dist[x][y]) continue; 

            for(int i=0; i<4; i++){
                int newx = x + dx[i];
                int newy = y + dy[i];

                if(newx<0 || newy<0 || newx>=n || newy>=m) continue;

                ll arrival = currtime;
                if(arrival < nums[newx][newy]){
                    arrival = (currtime + (nums[newx][newy]-currtime));
                }

                ll nexttime = (turn % 2 == 0) ? arrival + 2 : arrival + 1;

                if(nexttime < dist[newx][newy]){
                    dist[newx][newy] = nexttime;
                    q.push({{nexttime,turn+1},{newx,newy}});
                }
            }
        }

        return -1;
    }
};
