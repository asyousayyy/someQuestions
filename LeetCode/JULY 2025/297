/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root) return "";

        stringstream ss;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            TreeNode* it = q.front();
            q.pop();

            if(it){
                ss << it->val << ",";
                q.push(it->left);
                q.push(it->right);
            }
            else{
                ss << "#,";
            }
        }

        return ss.str(); //give the whole string back
        // ss = 1,2,3,#,#,4,5
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size()==0) return nullptr;

        string temp;
        stringstream ss(data);
        getline(ss,temp,',');

        TreeNode* root = new TreeNode(stoi(temp));
        //temp has the root char
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();

            //left
            if(getline(ss,temp,',')){
                if(temp != "#"){
                    node->left = new TreeNode(stoi(temp));
                    q.push(node->left);
                }
                else{
                    node->left = nullptr;
                }
            }

            //right
            if(getline(ss,temp,',')){
                if(temp != "#"){
                    node->right = new TreeNode(stoi(temp));
                    q.push(node->right);
                }
                else{
                    node->right = nullptr;
                }
            }
        }

        return root;
    }
};
