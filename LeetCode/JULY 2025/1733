 int minimumTeachings(int n, vector<vector<int>>& lang, 
    vector<vector<int>>& fr) {
        
        int m = lang.size();
        int maxi = 0;
        vector<unordered_set<int>> temp(m+1);

        for(int i=0; i<m; i++){
            temp[i+1].insert(lang[i].begin(), lang[i].end());
        }

        //find people who cannot talk to each
        //find max freq among them

        set<int> st; //people who cant talk

        for(auto it : fr){
            int u = it[0];
            int v = it[1];
            bool find = true;

            for(auto it : temp[u]){
                if(temp[v].find(it)!=temp[v].end()){
                    find = false;
                    break;
                }
            }

            if(find){
                st.insert(u);
                st.insert(v);
            }
        }

        int total = st.size();

        map<int,int> mp;
        
        for(auto it : st){
            for(int i=0; i<lang[it - 1].size(); i++){
                mp[lang[it - 1][i]]++;
                maxi = max(maxi, mp[lang[it - 1][i]]);
            }
        }

        return total - maxi;

    }
