/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* reverse(ListNode* head, int k){
        ListNode* curr = head;
        ListNode* next = NULL;
        ListNode* prev = NULL;

        while(curr && k--){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        head->next = curr; //connect to the next group
        return prev;
    }

    ListNode* reverseEvenLengthGroups(ListNode* head) {
        if(!head) return NULL;

        int num = 1;
        ListNode* curr = head;
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        ListNode* prev = dummy;

        while(curr){
            int count = 0;
            ListNode* temp = curr;
            while(temp && count<num){
                temp = temp->next;
                count++;
            }

            if(count%2==0){
                //reverse
                ListNode* tail = curr;
                ListNode* newhead = reverse(curr, count);
                prev->next = newhead;
                prev = tail;
                curr = tail->next;
            }

            else{
                for(int i=0; i<count; i++){
                    prev = curr;
                    curr = curr->next;
                }
            }

            num++;
        }        

        return dummy->next;
    }
};
