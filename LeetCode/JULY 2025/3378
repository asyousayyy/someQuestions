class DisjointSet {
public:
    vector<int> parent;
    DisjointSet(int n) {
        parent.resize(n);
        for (int i = 0; i < n; i++) parent[i] = i;
    }

    int findpar(int u) {
        if (u == parent[u]) return u;
        return parent[u] = findpar(parent[u]);
    }

    void unite(int u, int v) {
        int pu = findpar(u);
        int pv = findpar(v);
        if (pu != pv) parent[pu] = pv;
    }
};

class Solution {
public:
    int countComponents(vector<int>& nums, int threshold) {
        
        int n = nums.size();
        DisjointSet ds(threshold+1);
  
        unordered_set<int> st;

        for (int i = 0; i < n; ++i) {
            int num = nums[i];
            if (num <= threshold) {
                for (int j = num * 2; j <= threshold; j += num) {
                    ds.unite(nums[i], j);
                }
            }
        }

        int cnt = 0;

        for (int i = 0; i < n; ++i) {
            if(nums[i]>threshold) cnt++;
            else st.insert(ds.findpar(nums[i]));
        }

        return cnt + st.size();
    }
};
