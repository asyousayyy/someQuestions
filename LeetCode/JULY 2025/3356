bool helper(vector<int>& nums, vector<vector<int>>& q, int mid) {
    int n = nums.size();
    vector<int> diff(n + 2, 0); 

    for (int i = 0; i < mid; i++) {
        int l = q[i][0];
        int r = q[i][1];
        int val = q[i][2];
        diff[l] += val;
        diff[r + 1] -= val;
    }

    int curr = 0;
    for (int i = 0; i < n; i++) {
        curr += diff[i];
        if (curr < nums[i]) return false;
    }
    return true;
}

int minZeroArray(vector<int>& nums, vector<vector<int>>& q) {
    int low = 0, high = q.size(), ans = -1;

    while (low <= high) {
        int mid = (low + high) / 2;
        if (helper(nums, q, mid)) {
            ans = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }

    return ans;
}
