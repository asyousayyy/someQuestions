class Solution {
public:
    void dfs(int node, vector<int> &vis, vector<vector<int>> &adj, unordered_set<int> &st){
        vis[node] = 1;

        for(auto it : adj[node]){
            if(!vis[it] && st.find(it)==st.end()){
                dfs(it,vis,adj,st);
            }
        }
    }

    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& rest) {
        vector<vector<int>> adj(n);

        unordered_set<int> st(rest.begin(), rest.end());
        if(st.find(0) != st.end()) return 0;

        for(auto it : edges){
            int u = it[0];
            int v = it[1];
            if(st.find(u)!=st.end() || st.find(v)!=st.end()) continue; //skip these
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        vector<int> vis(n,0);
        dfs(0, vis, adj, st);       

        int cnt = 0;
        for(auto it : vis){
            if(it == 1) cnt++;
        }

        return cnt;
    }
};
