 bool isPrime(int num) {
    if (num < 2) return false;
    for (int i = 2; i * i <= num; i++)
        if (num % i == 0) return false;
    return true;
}

int minOperations(int n, int m) {
    if (isPrime(n) || isPrime(m)) return -1;

    unordered_set<int> visited;
    using pii = pair<int, int>;
    priority_queue<pii, vector<pii>, greater<pii>> pq;
    pq.push({n, n});
    visited.insert(n);

    while (!pq.empty()) {
        auto [cost, num] = pq.top();
        pq.pop();

        if (num == m) return cost;

        string s = to_string(num);
        
        for (int i = 0; i < s.size(); i++) {
            char orig = s[i];

            // Increase
            if (s[i] < '9') {
                s[i]++;
                int next = stoi(s);
                if (!isPrime(next) && visited.find(next) == visited.end()) {
                    pq.push({cost + next, next});
                    visited.insert(next);
                }
                s[i] = orig; 
            }

            // Decrease
            if (s[i] > '0') {
                s[i]--;
                int next = stoi(s);
                if (!isPrime(next) && visited.find(next) == visited.end()) {
                    pq.push({cost + next, next});
                    visited.insert(next);
                }
                s[i] = orig;
            }
        }
    }

    return -1;
}
Â©leetcode
