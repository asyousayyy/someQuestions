class Solution {
public:
    const int mod = 1e9+7;
    // dir = 1 (right), dir = 0 (down)

    int helper(int i, int j, int dir,vector<vector<int>> &grid,
    vector<vector<vector<int>>> &dp, int m, int n){

        if (i < 0 || j < 0 || i >= m || j >= n) return 0; 
        if (i == m-1 && j == n-1) return 1; 

        if (dp[i][j][dir] != -1) return dp[i][j][dir];

        int ans = 0;

        if (grid[i][j] == 0) {
            ans = (helper(i+1,j,0,grid,dp,m,n) + helper(i,j+1,1,grid,dp,m,n))%mod;
        } 
        else {
            if (dir == 1) ans = helper(i+1, j, 0, grid, dp, m, n)%mod; 
            else ans = helper(i, j+1, 1, grid, dp, m, n)%mod;
        }

        return dp[i][j][dir] = ans % mod;
    }
    
    int uniquePaths(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        vector<vector<vector<int>>> dp(m+1, vector<vector<int>>(n+1,
        vector<int>(2,-1)));

        return helper(0,0,0,grid,dp,m,n);
    }
};
Â©leetcode
